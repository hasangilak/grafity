name: Security

on:
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM UTC
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Run npm security audit
        uses: oke-py/npm-audit-action@v2
        with:
          audit_level: high
          github_token: ${{ secrets.GITHUB_TOKEN }}
          issue_assignees: ${{ github.actor }}
          issue_labels: security,vulnerability
          dedupe_issues: true

  # SAST (Static Application Security Testing)
  sast-scan:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript,typescript
          queries: +security-and-quality

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
            p/docker
            p/kubernetes

  # Secret scanning
  secret-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Container security scanning
  container-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: grafity:scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'grafity:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: grafity:scan
          args: --severity-threshold=high --file=Dockerfile

  # License compliance check
  license-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check licenses
        run: npx license-checker --summary --excludePrivatePackages

      - name: Run FOSSA scan
        uses: fossas/fossa-action@main
        if: env.FOSSA_API_KEY
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}

  # Supply chain security
  supply-chain:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Osv-Scanner
        uses: google/osv-scanner-action@v1
        with:
          scan-args: |-
            -r
            --skip-git
            ./

  # Security policy compliance
  compliance-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check security policy exists
        run: |
          if [ ! -f "SECURITY.md" ]; then
            echo "❌ SECURITY.md file not found"
            exit 1
          else
            echo "✅ SECURITY.md file found"
          fi

      - name: Validate Dockerfile security
        run: |
          # Check for security best practices in Dockerfile
          if [ -f "Dockerfile" ]; then
            echo "Checking Dockerfile security..."

            # Check if running as non-root user
            if ! grep -q "USER [^r]" Dockerfile; then
              echo "⚠️ Warning: Dockerfile may be running as root"
            fi

            # Check for COPY --chown usage
            if ! grep -q "COPY.*--chown" Dockerfile; then
              echo "⚠️ Warning: Consider using COPY --chown for better security"
            fi

            # Check for specific versions in base images
            if grep -q "FROM.*:latest" Dockerfile; then
              echo "⚠️ Warning: Using 'latest' tag in base images is not recommended"
            fi
          fi

  # Generate security report
  security-report:
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secret-scan, container-scan, license-check, supply-chain]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-report.md
          echo "" >> security-report.md
          echo "## Scan Results" >> security-report.md
          echo "" >> security-report.md
          echo "| Check | Status |" >> security-report.md
          echo "|-------|--------|" >> security-report.md
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> security-report.md
          echo "| SAST Scan | ${{ needs.sast-scan.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> security-report.md
          echo "| Secret Scan | ${{ needs.secret-scan.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> security-report.md
          echo "| Container Scan | ${{ needs.container-scan.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> security-report.md
          echo "| License Check | ${{ needs.license-check.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> security-report.md
          echo "| Supply Chain | ${{ needs.supply-chain.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> security-report.md
          echo "" >> security-report.md
          echo "Generated on: $(date)" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

      - name: Comment PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Scan Results\n\n${report}`
            });

  # Notify security team
  notify-security:
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secret-scan, container-scan]
    if: failure()
    steps:
      - name: Notify security team
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security'
          text: |
            🚨 *Security Scan Failed*

            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}

            Failed checks:
            - Dependency Scan: ${{ needs.dependency-scan.result }}
            - SAST Scan: ${{ needs.sast-scan.result }}
            - Secret Scan: ${{ needs.secret-scan.result }}
            - Container Scan: ${{ needs.container-scan.result }}

            Please review the security issues immediately.
          webhook_url: ${{ secrets.SECURITY_SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK }}